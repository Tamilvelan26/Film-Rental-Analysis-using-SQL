-- 1.	What is the total revenue generated from all rentals in the database?
SELECT SUM(amount) AS total_revenue
FROM Payment;

-- 2.	How many rentals were made in each month_name? 
SELECT EXTRACT(MONTH FROM rental_date) AS month,COUNT(*) AS rental_count
FROM Rental
GROUP BY EXTRACT(MONTH FROM rental_date)
ORDER BY month;

-- 3.	What is the rental rate of the film with the longest title in the database? 
SELECT rental_rate FROM Film
WHERE LENGTH(title) = (SELECT MAX(LENGTH(title)) FROM Film);

-- 4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
SELECT AVG(f.rental_rate) AS average_rental_rate FROM Rental r
INNER JOIN Film f ON r.inventory_id = f.film_id
WHERE r.rental_date >= DATE_SUB('2005-05-05 22:04:30', INTERVAL 30 DAY);

-- 5.	What is the most popular category of films in terms of the number of rentals? 
SELECT c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM Category c
JOIN Film_Category fc ON c.category_id = fc.category_id
JOIN Film f ON fc.film_id = f.film_id
JOIN Inventory i ON f.film_id = i.film_id
JOIN Rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name ORDER BY rental_count DESC LIMIT 1;

-- 6.	Find the longest movie duration from the list of films that have not been rented by any customer
SELECT MAX(length) AS longest_duration
FROM Film
WHERE film_id NOT IN (SELECT DISTINCT inventory.film_id FROM Rental
JOIN Inventory ON Rental.inventory_id = Inventory.inventory_id);

-- 7.	What is the average rental rate for films, broken down by category?
SELECT c.name AS category, AVG(f.rental_rate) AS average_rental_rate
FROM Film AS f
JOIN Film_category AS fc ON f.film_id = fc.film_id
JOIN Category AS c ON fc.category_id = c.category_id
GROUP BY c.name;

-- 8.	What is the total revenue generated from rentals for each actor in the database? 
SELECT CONCAT(a.first_name, ' ', a.last_name) AS actor_name, SUM(p.amount) AS total_revenue
FROM Actor a
JOIN Film_Actor fa ON a.actor_id = fa.actor_id
JOIN Film f ON fa.film_id = f.film_id
JOIN Rental r ON f.film_id = r.inventory_id
JOIN Payment p ON r.rental_id = p.rental_id
GROUP BY actor_name
ORDER BY total_revenue DESC;

-- 9.	Show all the actresses who worked in a film having a "Wrestler" in the description. 
SELECT DISTINCT A.first_name, A.last_name,F.description
FROM Actor A
INNER JOIN Film_Actor FA ON A.actor_id = FA.actor_id
INNER JOIN Film F ON FA.film_id = F.film_id
WHERE F.description LIKE '%Wrestler%';

-- 10.	Which customers have rented the same film more than once?
SELECT c.customer_id, c.first_name, c.last_name
FROM Customer c
JOIN Rental r ON c.customer_id = r.customer_id
JOIN (SELECT inventory_id FROM Rental
GROUP BY inventory_id
HAVING COUNT(*) > 1) subquery ON r.inventory_id = subquery.inventory_id;

-- 11.	How many films in the comedy category have a rental rate higher than the average rental rate?
SELECT COUNT(*) AS NumberOfComedyFilms
FROM Film AS f
JOIN Film_category AS fc ON f.film_id = fc.film_id
JOIN Category AS c ON fc.category_id = c.category_id
WHERE c.name = 'Comedy'
AND f.rental_rate > (SELECT AVG(rental_rate) FROM Film);

-- 12.	Which films have been rented the most by customers living in each city? 
WITH CityFilmRentalCounts AS (
    SELECT 
        ci.city,
        f.title,
        COUNT(*) AS rental_count,
        RANK() OVER(PARTITION BY ci.city ORDER BY COUNT(*) DESC) AS `rank`
    FROM Customer cu
    JOIN Address a ON cu.address_id = a.address_id
    JOIN City ci ON a.city_id = ci.city_id
    JOIN Rental r ON cu.customer_id = r.customer_id
    JOIN Inventory i ON r.inventory_id = i.inventory_id
    JOIN Film f ON i.film_id = f.film_id
    GROUP BY ci.city, f.title
)
SELECT city, title, rental_count
FROM CityFilmRentalCounts
WHERE `rank` = 1;


-- 13.	What is the total amount spent by customers whose rental payments exceed $200? 
SELECT SUM(p.amount ) AS total_amount_spent
FROM Payment p
JOIN Customer c ON p.customer_id = c.customer_id
WHERE p.amount > 200;

-- 14.	Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] 
SELECT 
    CONSTRAINT_NAME, 
    TABLE_NAME, 
    COLUMN_NAME, 
    REFERENCED_TABLE_NAME, 
    REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'Rental'
    AND CONSTRAINT_NAME LIKE 'FK_%';


-- 15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name
CREATE VIEW staff_revenue_by_city AS
SELECT s.staff_id, s.first_name AS staff_first_name,s.last_name AS staff_last_name,ci.city AS store_city,co.country AS store_country,
SUM(p.amount) OVER(PARTITION BY ci.city, co.country, s.staff_id) AS total_revenue
FROM Staff s
JOIN Store st ON s.store_id = st.store_id
JOIN Address a ON st.address_id = a.address_id
JOIN City ci ON a.city_id = ci.city_id
JOIN Country co ON ci.country_id = co.country_id
JOIN Payment p ON s.staff_id = p.staff_id;

-- 16.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,
--  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending.
CREATE VIEW RentalInformation AS
SELECT
    DATE(rental_date) AS visiting_day,
    c.first_name AS customer_name,
    f.title AS film_title,
    DATEDIFF(return_date, rental_date) AS no_of_rental_days,
    p.amount AS amount_paid,
    ROUND((p.amount / (SELECT SUM(amount) FROM payment WHERE customer_id = p.customer_id)) * 100, 2) AS percentage_spent
FROM
    Rental r
    JOIN Customer c ON r.customer_id = c.customer_id
    JOIN Payment p ON r.rental_id = p.rental_id
    JOIN Inventory i ON r.inventory_id = i.inventory_id
    JOIN Film f ON i.film_id = f.film_id;
    
    -- 17.	Display the customers who paid 50% of their total rental costs within one day.
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name
FROM Customer c
WHERE (
    SELECT SUM(amount)
    FROM Payment p
    WHERE p.customer_id = c.customer_id
    ) >= (
    SELECT 0.5 * SUM(p.amount)
    FROM Payment p
    WHERE p.customer_id = c.customer_id
    )
    AND (
        SELECT MIN(DATEDIFF(r.return_date, r.rental_date))
        FROM Rental r
        WHERE r.customer_id = c.customer_id
    ) <= 1;